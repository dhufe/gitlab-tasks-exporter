stages:
  - lint
  - test
  - build
  - release

linting:
  variables:
    GOLANGCI_LINT_VERSION: '2.4.0'
  image: ${GITLAB_DEPENDENCY_PROXY}golangci/golangci-lint:v$GOLANGCI_LINT_VERSION
  tags: [docker]
  stage: lint
  before_script:
    - go mod tidy
  script:
    - golangci-lint run --output.text.path=stdout --output.text.colors=false --output.text.print-issued-lines=false --output.code-climate.path=gl-code-quality-report.json
  artifacts:
    reports:
      codequality: gl-code-quality-report.json
    paths:
      - gl-code-quality-report.json
  allow_failure: false

test_project:
  image: docker.io/golang:alpine
  tags: [docker]
  stage: test
  before_script:
    - apk update --no-cache
    - go install gotest.tools/gotestsum@latest
    - go mod tidy
  script:
    - gotestsum --junitfile report.xml --format testname
  artifacts:
    when: always
    reports:
      junit: report.xml

build_project:
  image: docker.io/golang:alpine
  tags: [docker]
  stage: build
  before_script:
    - apk update --no-cache
    - apk add --no-cache make zip 
    - go mod tidy
  script:
    - make release 
  artifacts:
    paths:
      - bin/releases/gitlab-exporter-*.tar.gz
      - bin/releases/gitlab-exporter-*.zip
    expire_in: 1 hour
  except:
      - main

build_for_release:
  image: docker.io/golang:alpine
  tags: [docker]
  stage: build
  before_script:
    - apk update --no-cache
    - apk add --no-cache make zip git
    - go mod tidy
  script:
    - make release
    - echo "ðŸ“¦ Built artifacts:"
    - ls -la bin/releases
  artifacts:
    paths:
      - bin/releases/gitlab-exporter-*.tar.gz
      - bin/releases/gitlab-exporter-*.zip
    expire_in: 1 hour
  only:
    - main

create_release:
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  tags: [docker]
  stage: release
  dependencies:
    - build_for_release
  before_script:
    - apk add --no-cache git
  script:
    - echo "ðŸ“¦ Using pre-built artifacts:"
    - ls -la bin/releases/

    # Version ermitteln
    - |
      if [ -n "$CI_COMMIT_TAG" ]; then
        export VERSION="$CI_COMMIT_TAG"
      else
        COMMIT_SHORT=$(echo $CI_COMMIT_SHA | cut -c1-8)
        export VERSION="v1.0.0-$COMMIT_SHORT"
      fi
      echo "ðŸš€ Version: $VERSION"

    # Sehr einfache Beschreibung (kein Multiline!)
    - export RELEASE_DESCRIPTION="Automated release $VERSION from commit $(echo $CI_COMMIT_SHA | cut -c1-8)"

  artifacts:
    paths:
      - bin/releases/gitlab-exporter-*.tar.gz
      - bin/releases/gitlab-exporter-*.zip
    expire_in: 4 weeks

  release:
    tag_name: '$VERSION'
    name: 'GitLab Exporter $VERSION'
    description: '$RELEASE_DESCRIPTION'

  only:
    - main
  # Optional: Automatisch bei merge oder manuell
  when: on_success  # Ã„ndere zu "on_success" fÃ¼r automatische Releases