stages:
  - lint
  - test
  - build
  - release

linting:
  variables:
    GOLANGCI_LINT_VERSION: '2.4.0'
  image: ${GITLAB_DEPENDENCY_PROXY}golangci/golangci-lint:v$GOLANGCI_LINT_VERSION
  tags: [docker]
  stage: lint
  before_script:
    - go mod tidy
  script:
    - golangci-lint run --output.text.path=stdout --output.text.colors=false --output.text.print-issued-lines=false --output.code-climate.path=gl-code-quality-report.json
  artifacts:
    reports:
      codequality: gl-code-quality-report.json
    paths:
      - gl-code-quality-report.json
  allow_failure: false

test_project:
  image: docker.io/golang:alpine
  tags: [docker]
  stage: test
  before_script:
    - apk update --no-cache
    - go install gotest.tools/gotestsum@latest
    - go mod tidy
  script:
    - gotestsum --junitfile report.xml --format testname
  artifacts:
    when: always
    reports:
      junit: report.xml

build_project:
  image: docker.io/golang:alpine
  tags: [docker]
  stage: build
  before_script:
    - apk update --no-cache
    - apk add --no-cache make zip 
    - go mod tidy
  script:
    - make release 
  artifacts:
    paths:
      - bin/releases/gitlab-exporter-*.tar.gz
      - bin/releases/gitlab-exporter-*.zip
    expire_in: 1 hour
  except:
      - main

build_for_release:
  image: docker.io/golang:alpine
  tags: [docker]
  stage: build
  before_script:
    - apk update --no-cache
    - apk add --no-cache make zip git
    - go mod tidy
  script:
    - make release
    - echo "📦 Built artifacts:"
    - ls -la bin/releases
  artifacts:
    paths:
      - bin/releases/gitlab-exporter-*.tar.gz
      - bin/releases/gitlab-exporter-*.zip
    expire_in: 1 hour
  only:
    - main

create_release:
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  tags: [docker]
  stage: release
  dependencies:
    - build_for_release  # Artifacts vom Build-Job laden
  before_script:
    - apk add --no-cache git
  script:
    # Keine Go-Builds hier, nur Artifacts verwenden
    - echo "📦 Using pre-built artifacts:"
    - ls -la bin/releases
    
    # Version aus Git ermitteln (ohne Go)
    - |
      if [ -n "$CI_COMMIT_TAG" ]; then
        VERSION=$CI_COMMIT_TAG
      else
        # Alternative: aus Makefile oder Commit ableiten
        COMMIT_SHORT=$(echo $CI_COMMIT_SHA | cut -c1-8)
        VERSION="v1.0.0-$COMMIT_SHORT"  # Oder deine bevorzugte Logik
      fi
      echo "VERSION=$VERSION" > release.env
      echo "🚀 Version: $VERSION"
      
     # Release-Beschreibung als separate Datei (nicht dotenv!)
    - |
      cat > release_description.md << 'EOF'
      🚀 Automated Release from develop→main merge
      
      **Commit:** $(echo $CI_COMMIT_SHA | cut -c1-8)
      **Pipeline:** #$CI_PIPELINE_ID
      
      ## 📦 Available Downloads
      * 🐧 Linux AMD64
      * 🍎 macOS Intel + Apple Silicon  
      * 🪟 Windows AMD64
      
      ## 🔧 Installation
      ```bash
      # Linux/macOS
      tar -xzf gitlab-exporter-*.tar.gz
      ./gitlab-exporter --help
      
      # Windows  
      unzip gitlab-exporter-windows-amd64.zip
      gitlab-exporter.exe --help
      ```
      EOF

  artifacts:
    paths:
      - bin/releases/gitlab-exporter-*.tar.gz
      - bin/releases/gitlab-exporter-*.zip
      - release_description.md
    expire_in: 4 weeks
    reports:
      dotenv: release.env

  release:
    tag_name: $VERSION
    name: 'Release $VERSION'
    description: './release_description.md'
    assets:
      links:
        - name: '🐧 Linux AMD64 Binary'
          url: '$CI_PROJECT_URL/-/jobs/$CI_JOB_ID/artifacts/file/bin/releases/gitlab-exporter-linux-amd64.tar.gz'
        - name: '🍎 macOS Intel (AMD64) Binary'
          url: '$CI_PROJECT_URL/-/jobs/$CI_JOB_ID/artifacts/file/bin/releases/gitlab-exporter-darwin-amd64.tar.gz'
        - name: '🍎 macOS Apple Silicon (ARM64) Binary'
          url: '$CI_PROJECT_URL/-/jobs/$CI_JOB_ID/artifacts/file/bin/releases/gitlab-exporter-darwin-arm64.tar.gz'
        - name: '🪟 Windows AMD64 Binary'
          url: '$CI_PROJECT_URL/-/jobs/$CI_JOB_ID/artifacts/file/bin/releases/gitlab-exporter-windows-amd64.zip'

  only:
    - main

  # Optional: Automatisch bei merge oder manuell
  when: on_success  # Ändere zu "on_success" für automatische Releases