stages:
  - lint
  - test
  - build
  - release

linting:
  variables:
    GOLANGCI_LINT_VERSION: '2.4.0'
  image: ${GITLAB_DEPENDENCY_PROXY}golangci/golangci-lint:v$GOLANGCI_LINT_VERSION
  tags: [docker]
  stage: lint
  before_script:
    - go mod tidy
  script:
    - golangci-lint run --output.text.path=stdout --output.text.colors=false --output.text.print-issued-lines=false --output.code-climate.path=gl-code-quality-report.json
  artifacts:
    reports:
      codequality: gl-code-quality-report.json
    paths:
      - gl-code-quality-report.json
  allow_failure: false

test_project:
  image: docker.io/golang:alpine
  tags: [docker]
  stage: test
  before_script:
    - apk update --no-cache
    - go install gotest.tools/gotestsum@latest
    - go mod tidy
  script:
    - gotestsum --junitfile report.xml --format testname
  artifacts:
    when: always
    reports:
      junit: report.xml

build_project:
  image: docker.io/golang:alpine
  tags: [docker]
  stage: build
  before_script:
    - apk update --no-cache
    - apk add --no-cache make zip golangci-lint
    - go mod tidy
  script:
    - make release 
  artifacts:
    paths:
      - bin/release/gitlab-exporter-*.tar.gz
      - bin/release/gitlab-exporter-*.zip
    expire_in: 1 hour
    except:
      - main

create_release:
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  tags: [docker]
  stage: release
  before_script:
    - apk add --no-cache make zip go git
    - go mod tidy
  script:
    # Build erstellen
    - make release

    # Version aus Git-Tag oder fallback
    - |
      if [ -n "$CI_COMMIT_TAG" ]; then
        # Pipeline wurde durch Tag ausgel√∂st
        VERSION=$CI_COMMIT_TAG
      else
        # Kein Tag vorhanden, letzten Tag + Commit verwenden
        LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        COMMIT_SHORT=$(echo $CI_COMMIT_SHA | cut -c1-8)
        VERSION="$LAST_TAG-$COMMIT_SHORT"
      fi
      
      echo "VERSION=$VERSION" >> release.env
      echo "üöÄ Creating release: $VERSION"

    # Artefakte auflisten
    - echo "üì¶ Generated artifacts:"
    - ls -la bin/release/

    # Release-Beschreibung erstellen
    - |
      echo "RELEASE_DESCRIPTION<<EOF" >> release.env
      echo "üöÄ Automated Release $VERSION" >> release.env
      echo "" >> release.env
      echo "**Generated from:** develop ‚Üí main merge" >> release.env
      echo "**Commit:** [\`$(echo $CI_COMMIT_SHA | cut -c1-8)\`]($CI_PROJECT_URL/-/commit/$CI_COMMIT_SHA)" >> release.env
      echo "**Pipeline:** [#$CI_PIPELINE_ID]($CI_PIPELINE_URL)" >> release.env
      echo "" >> release.env
      echo "## üìã Recent Changes" >> release.env
      git log --oneline --pretty=format:"* %s" $(git describe --tags --abbrev=0 2>/dev/null || echo "HEAD~10")..HEAD >> release.env
      echo "" >> release.env
      echo "" >> release.env
      echo "## üì¶ Installation" >> release.env
      echo "\`\`\`bash" >> release.env
      echo "# Download for your platform:" >> release.env
      echo "curl -L $CI_PROJECT_URL/-/jobs/$CI_JOB_ID/artifacts/file/bin/release/gitlab-exporter-linux-amd64.tar.gz" >> release.env
      echo "tar -xzf gitlab-exporter-linux-amd64.tar.gz" >> release.env
      echo "./gitlab-exporter-linux-amd64 --help" >> release.env
      echo "\`\`\`" >> release.env
      echo "EOF" >> release.env

  artifacts:
    paths:
      - bin/release/gitlab-exporter-*.tar.gz
      - bin/release/gitlab-exporter-*.zip
    expire_in: 4 weeks
    reports:
      dotenv: release.env

  release:
    tag_name: $VERSION
    name: 'Release $VERSION'
    description: $RELEASE_DESCRIPTION
    assets:
      links:
        - name: 'üêß Linux AMD64 Binary'
          url: '$CI_PROJECT_URL/-/jobs/$CI_JOB_ID/artifacts/file/bin/release/gitlab-exporter-linux-amd64.tar.gz'
        - name: 'üçé macOS Intel (AMD64) Binary'
          url: '$CI_PROJECT_URL/-/jobs/$CI_JOB_ID/artifacts/file/bin/release/gitlab-exporter-darwin-amd64.tar.gz'
        - name: 'üçé macOS Apple Silicon (ARM64) Binary'
          url: '$CI_PROJECT_URL/-/jobs/$CI_JOB_ID/artifacts/file/bin/release/gitlab-exporter-darwin-arm64.tar.gz'
        - name: 'ü™ü Windows AMD64 Binary'
          url: '$CI_PROJECT_URL/-/jobs/$CI_JOB_ID/artifacts/file/bin/release/gitlab-exporter-windows-amd64.zip'

  only:
    - main

  # Optional: Automatisch bei merge oder manuell
  when: manual  # √Ñndere zu "on_success" f√ºr automatische Releases